job('{{ job_name }}') {
  description('Destroy Cloud Foundry environment')
  {% if vagrant is defined %}
    disabled(shouldDisable = true)
  {% endif %}
  parameters {
    stringParam("DEPLOY_ENV", "{{ target_environment_name }}",
            "Select which environment you wish to run against")
    stringParam("REF_NAME", "{{ reference_name }}",
            "Select which branch or tag you wish to use")
  }
  scm {
    git {
      remote {
    url('https://github.com/alphagov/cf-terraform.git')
      }
      branch('${REF_NAME}')
      createTag(false)
    }
  }
  wrappers {
    colorizeOutput()
  }
  publishers {
  {% if vagrant is not defined %}
    mailer("{{ email_notification_address | default("the-multi-cloud-paas-team@digital.cabinet-office.gov.uk")}}")
  {% endif %}
  }
  steps {
shell('''#!/bin/bash

echo Set-up ssh keys and credentials
mkdir -p aws/ssh
cp ~/.ssh/* aws/ssh
. ~/.aws_credentials
export TF_VAR_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
export TF_VAR_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

echo Setting up ssh-agent and cleanup trap
eval $(ssh-agent) && ssh-add ~/.ssh/insecure-deployer
set -e
trap "ssh-agent -k" EXIT

echo Retrieving Terraform state
ln -sf ~/${DEPLOY_ENV}_{{ platform }}.tfstate {{ platform }}/${DEPLOY_ENV}.tfstate
ln -sf ~/${DEPLOY_ENV}_{{ platform }}.tfstate.backup {{ platform }}/${DEPLOY_ENV}.tfstate.backup

make destroy-{{ platform }} DEPLOY_ENV=${DEPLOY_ENV} ROOT_PASS_DIR=jenkins SKIP_CONFIRM=1
''')
  }

}
