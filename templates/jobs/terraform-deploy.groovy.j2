job {
  name '{{ target_environment_name }}-terraform-deploy'
  description('Deploy and automatically update Terraform environments upon repository changes')
  {% if vagrant is defined %}
    disabled(shouldDisable = true)
  {% endif %}
  parameters {
    choiceParam("action", ["apply", "destroy"],
                "Select if you want to apply changes to environments or destroy them.")
    stringParam("DEPLOY_ENV", "{{ target_environment_name }}",
            "Select which environment you wish to run terraform against")
    stringParam("REF_NAME", "{{ reference_name }}",
            "Select which branch or tag you wish to run terraform with")
  }
  scm {
    git {
      remote {
	url('https://github.com/alphagov/tsuru-terraform.git')
      }
      branch('${REF_NAME}')
      createTag(false)
    }
  }
{% if poll_scm is defined %}
  triggers {
    scm("{{ poll_scm }}")
  }
{% endif %}
  wrappers {
    colorizeOutput()
  }
  publishers {
    mailer("the-multi-cloud-paas-team@digital.cabinet-office.gov.uk", false, true)
    downstreamParameterized {
      trigger("{{ target_environment_name }}-ansible-deploy-aws, {{ target_environment_name }}-ansible-deploy-gce", 'SUCCESS', true) {
        currentBuild()
      }
    }
  }
  steps {
    shell('''#!/bin/bash
set -x
home=`pwd`
environment_name=${DEPLOY_ENV}

# Set-up ssh keys and gce credentials
mkdir -p gce/ssh aws/ssh
cp ~/.ssh/* gce/ssh
cp ~/.ssh/* aws/ssh
cp ~/.account.json gce/account.json

# Terraform
set -e
[[ ${action} == "destroy" ]] && extraopts="-force"

# GCE
cd gce
terraform ${action} -var env=${environment_name} -input=false -state=${environment_name}-terraform.tfstate ${extraopts}

# AWS
cd ../aws
. ~/.aws_credentials
terraform ${action} -var env=${environment_name} -input=false -state=${environment_name}-terraform.tfstate ${extraopts}
''')
  }
}
