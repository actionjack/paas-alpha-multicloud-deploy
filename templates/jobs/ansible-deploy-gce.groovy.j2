job('{{ target_environment_name }}-ansible-deploy-gce') {
  description('Run ansible against Google Compute Engine')
  {% if vagrant is defined %}
    disabled(shouldDisable = true)
  {% endif %}
  parameters {
    stringParam("DEPLOY_ENV", "{{ target_environment_name }}",
            "Select which environment you wish to run ansible against")
    stringParam("REF_NAME", "{{ reference_name }}",
            "Select which branch or tag you wish to run ansible with")
  }
  scm {
    git {
      remote {
	url('https://github.com/alphagov/tsuru-ansible.git')
      }
      branch('${REF_NAME}')
      createTag(false)
    }
  }
  triggers {
   {% if poll_scm is defined %}
    scm("{{ poll_scm }}")
   {% endif %}
   {% if upstream_jobs is defined %}
   {% for upstream_job in upstream_jobs %}
    upstream('{{ upstream_job }}','SUCCESS')
   {% endfor %}
   {% endif %}
  }
  wrappers {
    colorizeOutput()
  }
  publishers {
  {% if vagrant is not defined %}
    mailer("{{ email_notification_address | default("the-multi-cloud-paas-team@digital.cabinet-office.gov.uk")}}")
  {% endif %}
  }
  steps {
    shell('''#!/bin/bash
# Disable output buffering to give realtime data
export PYTHONUNBUFFERED=1

[[ -f /usr/bin/figlet ]] && figlet Assigning SSH private key
eval $(ssh-agent) && ssh-add ~/.ssh/insecure-deployer

# Setting up trap to clean up ssh-agent process in the event of any failure
set -e
trap "kill ${SSH_AGENT_PID}" ERR

[[ -f /usr/bin/figlet ]] && figlet Sourcing GCE credentials
cp ~/.secrets.py secrets.py
cp ~/.gce_account.pem gce_account.pem
echo done...


[[ -f /usr/bin/figlet ]] && figlet Setting up virtualenv
virtualenv .venv
. .venv/bin/activate

[[ -f /usr/bin/figlet ]] && figlet Installing python dependencies
pip install -Ur requirements.txt

[[ -f /usr/bin/figlet ]] && figlet Running ansible against ${DEPLOY_ENV} environment
make gce ARGS='-v'

kill ${SSH_AGENT_PID}
''')
  }
}
