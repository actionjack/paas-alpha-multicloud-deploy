# vim:ft=ansible:
---
# Bring up jenkins ci master server.
- hosts: all
  sudo: yes
  roles:
    - geerlingguy.jenkins
    - jdauphant.nginx
    - { role: openconnect, when: vagrant is not defined }
  pre_tasks:
    - name: install snake oil ssl certificates
      apt: name=ssl-cert state=present
  vars:
    jenkins_plugins:
      - git
      - ssh
      - job-dsl
      - github-api
      - github-oauth
      - role-strategy
      - ansicolor
    nginx_sites:
      ssl_reverse_proxy:
        - listen 443 ssl
        - ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem
        - ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key
        - server_name jenkins.tooling.paas.alphagov.co.uk
        - location / {
          proxy_pass http://localhost:8080;
          proxy_redirect default;
          proxy_redirect http://$host/ https://$host/;
          proxy_redirect http://$hostname/ https://$host/;
          proxy_read_timeout 15s;
          proxy_connect_timeout 15s;
          }
      default:
        - listen 80
        - return 301 https://$host$request_uri
    nginx_configs:
      proxy:
        - proxy_set_header Host $http_host
        - proxy_set_header X-Real-IP  $remote_addr
        - proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for
        - proxy_set_header X-Forwarded-Proto https
  tasks:
    - name: install required packages
      action: apt pkg={{item}} state=installed
      with_items:
        - ansible
        - figlet
        - git
        - unzip
        - python-dev
        - python-pip
        - python-virtualenv
    - name: download terraform
      get_url: url=https://dl.bintray.com/mitchellh/terraform/terraform_0.4.2_linux_amd64.zip dest=/tmp/terraform.zip mode=0440
      notify:
        - unzip terraform.zip to /usr/local/bin
    - name: configure jenkins token
      copy: content="-u {{ jenkins_admin_user }}:{{ jenkins_api_token }}" dest=~/jenkins_auth
      when: jenkins_admin_user is defined and jenkins_api_token is defined
      notify:
        - setup jenkins authentication
    - name: render jenkins authentication configuration script
      template: dest=~/setup_authentication.groovy src=templates/setup_authentication.groovy.j2
      notify:
        - setup jenkins authentication
    - name: update java keystore with github certificate
      copy: content="{{ github_cert }}" dest=~/{{ github_hostname }}.crt
      when: github_cert is defined
      notify:
        - import certificate into java keystore
    - name: render jenkins admin mail and smtp server configuration script
      template: dest=~/setup_mail.groovy src=templates/setup_mail.groovy.j2
      notify:
        - configure admin email and smtp server
    - name: copy default dsl seed config.xml to jenkins master
      copy: src=dsl/config.xml dest=/tmp/config.xml owner=jenkins group=jenkins mode=0644
    - name: create default dsl seed job
      shell: "curl -X POST 'http://127.0.0.1:8080/createItem?name=default-dsl-job' --data-binary '@config.xml' -H 'Content-Type: text/xml' -k $(cat ~/jenkins_auth)"
      args:
        chdir: /tmp/
    - name: create jenkins seed job directory structure
      copy: src=jobs dest=/var/lib/jenkins/jobs/default-dsl-job/workspace directory_mode=0750 mode=0640 owner=jenkins group=jenkins
    - name: generate jenkins job from dsl seed job
      shell: "curl -X POST 'http://127.0.0.1:8080/job/default-dsl-job/build' -k $(cat ~/jenkins_auth)"
    - name: create jenkins .ssh directory
      file: path=/var/lib/jenkins/.ssh state=directory mode=0775 owner="jenkins"
    - name: deploy deployer keys
      copy:
        content: "{{ deployer_key['key'] }}"
        dest: /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}
        mode: 0600
        owner: "jenkins"
      when: deployer_key is defined
      notify:
        - generate pub key
    - name: deploy gce credentials
      template: src=templates/gce_account.json.j2 dest=/var/lib/jenkins/.account.json
      when: gce_account is defined
    - name: deploy aws credentials
      copy: content="{{ aws_credentials }}" dest=/var/lib/jenkins/.aws_credentials
      when: aws_credentials is defined
  handlers:
    - name: unzip terraform.zip to /usr/local/bin 
      unarchive: src=/tmp/terraform.zip dest=/usr/local/bin copy=no
    - name: import certificate into java keystore
      shell: "keytool -import -alias {{ github_hostname }} -keystore {{ java_home }}/lib/security/cacerts -file ~/{{ github_hostname }}.crt -storepass {{ keystore_password }} -noprompt"
      when: vagrant is not defined
    - name: setup jenkins authentication
      shell: "curl 'http://127.0.0.1:8080/scriptText' -d \"script=$(cat ~/setup_authentication.groovy)\" -k $(cat ~/jenkins_auth)"
      when: vagrant is not defined
    - name: configure admin email and smtp server
      shell: "curl 'http://127.0.0.1:8080/scriptText' -d \"script=$(cat ~/setup_mail.groovy)\" -k $(cat ~/jenkins_auth)"
    - name: generate pub key
      shell: "ssh-keygen -y -f /var/lib/jenkins/.ssh/{{ deployer_key['name'] }} \
> /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}.pub \
&& chown jenkins:jenkins /var/lib/jenkins/.ssh/{{ deployer_key['name'] }}.pub"

